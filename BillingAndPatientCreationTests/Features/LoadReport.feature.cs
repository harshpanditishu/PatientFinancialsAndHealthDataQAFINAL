// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BillingAndPatientCreationTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class LoadReportOfPATIENTSForHTMLREPORTGENERATIONFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "LoadReport.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "LoadReport of PATIENTS for HTML REPORT GENERATION", "Loading patient data for reports creation", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "LoadReport of PATIENTS for HTML REPORT GENERATION")))
            {
                global::BillingAndPatientCreationTests.Features.LoadReportOfPATIENTSForHTMLREPORTGENERATIONFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("To verify if the loaded patient data is exported to an html report form wth corre" +
            "ct data")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "LoadReport of PATIENTS for HTML REPORT GENERATION")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("ReportstestCases")]
        public void ToVerifyIfTheLoadedPatientDataIsExportedToAnHtmlReportFormWthCorrectData()
        {
            string[] tagsOfScenario = new string[] {
                    "ReportstestCases"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("To verify if the loaded patient data is exported to an html report form wth corre" +
                    "ct data", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Fname",
                            "MName",
                            "Age",
                            "Insurance",
                            "Lname",
                            "Nationality"});
                table6.AddRow(new string[] {
                            "Mark",
                            "S",
                            "23",
                            "Aetna",
                            "Bride",
                            "American"});
                table6.AddRow(new string[] {
                            "John",
                            "R",
                            "43",
                            "Aetna",
                            "Nash",
                            "Australian"});
                table6.AddRow(new string[] {
                            "Anna",
                            "S",
                            "63",
                            "Aetna",
                            "Brown",
                            "American"});
                table6.AddRow(new string[] {
                            "Shiv",
                            "Y",
                            "83",
                            "Aetna",
                            "Kumar",
                            "Indian"});
                table6.AddRow(new string[] {
                            "Dassler",
                            "O",
                            "23",
                            "Aetna",
                            "Matt",
                            "German"});
                table6.AddRow(new string[] {
                            "Chan",
                            "P",
                            "36",
                            "Aetna",
                            "Patterson",
                            "American"});
                table6.AddRow(new string[] {
                            "Jimmy",
                            "E",
                            "42",
                            "Aetna",
                            "Bob",
                            "American"});
#line 6
 testRunner.Given("User loads the data for following data of multiple patients", ((string)(null)), table6, "Given ");
#line hidden
#line 16
 testRunner.When("User initiates the loading of data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 17
 testRunner.Then("All the data of the patients loaded in the previous step can be viewed in html fo" +
                        "rmat", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
